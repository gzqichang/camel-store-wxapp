<style lang="less">
  @import (reference) "../../config/variables";

  view.page-explore {
    .top {
      display: flex;
      align-items: center;
      justify-content: space-between;

      .search {
        height: 76rpx;
        display: flex;
        align-items: center;
        justify-content: center;

        image {
          width: 28rpx;
          height: 32rpx;
          padding-top: 2rpx;
          display: flex;
        }

        view {
          width: 70rpx;
          margin-right: 28rpx;
          color: @textColor1;
          font-size: 30rpx;
          display: flex;
          justify-content: flex-end;
        }
      }
    }
  }
</style>

<template>
  <view class="page-explore">
    <!--更丰富的首页-->
    <block wx:if="{{enableRicherLandingPage}}">
      <header></header>

      <!--一切正常-->
      <block wx:if="{{storeStatus === 'available'}}">
        <wideBanner></wideBanner>
        <topNavigator></topNavigator>
        <groupingBlock></groupingBlock>
        <periodBlock></periodBlock>
        <recommendBlock></recommendBlock>
        <creditBlock></creditBlock>
      </block>
    </block>

    <!--传统首页-->
    <block wx:else>
      <view class="top">
        <location></location>
        <navigator
          class='search'
          hover-class='none'
          url='/pages/explore/search'>
          <image src="../../assets/img/explore/magnifier.png"></image>
          <view>搜索</view>
        </navigator>
      </view>

      <!--一切正常-->
      <block wx:if="{{storeStatus === 'available'}}">
        <view style="margin-top: 54rpx;">
          <banner></banner>
        </view>
      </block>
    </block>

    <!--请求定位中-->
    <block wx:if="{{storeStatus === 'locating'}}">
      <loading></loading>
    </block>

    <!--请求定位失败-->
    <!--不在配送范围-->
    <block wx:if="{{storeStatus === 'error' || storeStatus === 'unavailable'}}">
      <unavailable></unavailable>
    </block>
  </view>

  <message :showMessage.sync="showMsg"></message>
</template>

<script>
  import wepy from 'wepy';
  import {connect} from 'wepy-redux';

  import UtilsMixin from '../../mixins/utils';
  import PersistenceMixin from '../../mixins/persistence';
  import {actions as ProductActions} from '../../store/product';
  import {actions as HomeActions} from '../../store/home';
  import {actions as OrderActions} from '../../store/order';
  import {actions as OthersActions} from '../../store/others';
  import {actions as StoreActions} from '../../store/store';
  import {actions as TimerActions} from '../../store/timer';
  import {actions as VideoActions} from '../../store/video';
  import Header from '../../components/explore/landingPage/header';
  import WideBanner from '../../components/explore/landingPage/banner';
  import Navigator from '../../components/explore/landingPage/navigator';
  import GroupingBlock from '../../components/explore/landingPage/groupingBlock';
  import PeriodBlock from '../../components/explore/landingPage/periodBlock';
  import RecommendBlock from '../../components/explore/landingPage/recommendBlock';
  import CreditBlock from '../../components/explore/landingPage/creditBlock';
  import Banner from '../../components/explore/banner';
  import Message from '../../components/explore/message';
  import Location from '../../components/explore/location';
  import Loading from '../../components/explore/loading';
  import Unavailable from '../../components/explore/unavailable';


  @connect({
    userID(state) { return state.user.id },
    storeID(state) { return state.store.id },
    storeStatus(state) { return state.store.status },
    disabledLocating(state) { return state.store.disabledLocating },
    enableRicherLandingPage(state) { return state.config.enableRicherLandingPage },
    user(state) { return state.user },
  }, {
    ...ProductActions,
    ...OrderActions,
    ...StoreActions,
    ...OthersActions,
    ...HomeActions,
    ...TimerActions,
    ...VideoActions,
  })


  export default class Explore extends wepy.page {
    // 发现 页面
    config = {
      enablePullDownRefresh: true,
    };

    data = {
      showMessage: false,
      showRequest: false, // 请求获取地址权限的弹框
      isFirstTime: true,
      location: null,
    };

    components = {
      banner: Banner,
      wideBanner: WideBanner,
      topNavigator: Navigator,
      groupingBlock: GroupingBlock,
      periodBlock: PeriodBlock,
      recommendBlock: RecommendBlock,
      creditBlock: CreditBlock,
      header: Header,
      message: Message,
      location: Location,
      loading: Loading,
      unavailable: Unavailable,
    };

    mixins = [UtilsMixin, PersistenceMixin];

    computed = {
      showMsg: () => (this.showMessage && !this.showRequest),
    };

    methods = {
      bindGetStore: () => {
        const onFail = () => {
          this.showRequest = false;
          if (this.disabledLocating) {
            this.showMessage = true;
            this.pinpointMe();
          } else {
            this.methods.setStoreStatus('error');
            this.showToast('无法请求定位信息');
          }

          this.$apply();
        };

        const onSuccess = () => {
          this.showRequest = false;
          this.showMessage = true;
          wepy.getLocation({
            success: ({latitude, longitude}) => {
              this.location = [latitude, longitude].join(',');
              this.pinpointMe();
              this.methods.toggleDisabledLocating(false);
              this.setStorageSync('disabledLocating', false);
            },
            fail: onFail,
          });
          this.$apply();
        };

        wepy.getSetting({
          success: (res) => {
            if (!res.authSetting['scope.userLocation'])
              wepy.authorize({
                scope: 'scope.userLocation',
                success: onSuccess,
                fail: onFail,
              });
            else
              onSuccess();
          },
          fail: onFail,
        });
      },
    };

    onShow() {
      this.$broadcast('toggleAutoplay', true);

      // Clear Timer Task
      this.methods.clearTicking();

      // Clear Ordering temp data(eg. order notes)
      this.methods.setOrderNotes('');
      // this.methods.setOrderGroup('');

      if (this.storeID) {
        this.showRequest = false;
        this.showMessage = true;
      } else {
        this.showRequest = true;
        this.methods.bindGetStore();
      }

      const self = this;
      if (this.getStorageSync('hideTabBar'))
        wepy.showTabBar({
          animation: true,
          success: () => self.setStorageSync('hideTabBar', false),
        });
    };

    onHide() {
      this.$broadcast('toggleAutoplay', false);
      clearTimeout();
    }

    onLoad() {
      // Load up Messages
      this.methods.getMessageService();

      // Get User Location
      this.$broadcast('tryLocating', true);

      // Initial
      // this.methods.bindGetStore();

      // Get Membership Levels
      this.methods.getMembershipLevelsService();

      // Get Video List
      this.methods.getShortVideoService({pageSize: 3, reload: true});

      setTimeout(() => {
        const self = this;
        if (wepy.canIUse('getUpdateManager')) {
          const updateManager = wepy.getUpdateManager();

          updateManager.onCheckForUpdate((res) => {
            console.warn('新版本', res.hasUpdate);
            if (res.hasUpdate) {
              updateManager.onUpdateReady(() => {
                self.showModal({
                  title: '更新提示',
                  content: '新版本已经准备好，是否重启应用？',
                  success: function(res) {
                    if (res.confirm) {
                      // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                      updateManager.applyUpdate();
                    }
                  },
                });
              });

              updateManager.onUpdateFailed(() => {
                console.warn('新版本下载失败');
                self.showModal({
                  title: '已经有新版本了哟~',
                  content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~',
                });
              });
            }
          });
        }
      }, 3000);
    }

    onPullDownRefresh() {
      wepy.stopPullDownRefresh();
      this.$broadcast('toggleAutoplay', true);
      // Get User Location
      this.$broadcast('tryLocating', true);

      this.showRequest = true;
      this.methods.bindGetStore();
    }

    pinpointMe = () => {
      const store = this.getStorageSync('store') || null;
      this.methods.pinpointCurrentStoreService({
        store,
        location: this.location,
      });
    };

    /* eslint-disable camelcase */
    onShareAppMessage() {
      const title = this.$parent.globalData.appName || '';
      const uri = this.getCurrentPath();
      const {wx_app_openid} = this.user;
      return {
        title,
        path: `/pages/util/index?scene=${wx_app_openid}&uri=/${uri}`,
      };
    };
  }
</script>
