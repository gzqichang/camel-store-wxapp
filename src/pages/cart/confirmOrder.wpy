<style lang="less">
  @import (reference) "../../config/variables";

  page {
    background: @faintWhite;
  }

  view.page-confirm-order {
    .top-address {
      margin-bottom: 8rpx;
      padding: 24rpx 30rpx;
      background: @solidWhite;
      border-top: 1px solid @dimWhite;
      display: flex;
      align-items: center;
      justify-content: space-between;

      .addr-no-left {
        display: inline-flex;
        align-items: center;

        image {
          width: 38rpx;
          margin-right: 20rpx;
        }

        .addr-text {
          color: @textColor1;
          font-size: 28rpx;
        }
      }

      .addr-left {
        width: 80vw;
        color: @textColor1;
        display: inline-flex;
        flex-direction: column;
        justify-content: flex-start;

        image {
          width: 26rpx;
          margin-right: 20rpx;
        }

        .left-up {
          font-size: 36rpx;
          display: inline-flex;
          align-items: center;
          flex-direction: row;
          justify-content: flex-start;
        }

        .left-down {
          margin-top: 20rpx;
          font-size: 26rpx;
          text-overflow: ellipsis;
          white-space: nowrap;
          overflow: hidden;
        }
      }

      .addr-right image {
        width: 32rpx;
      }
    }

    .top {
      .cart-store {
        height: 94rpx;
        margin-top: 15rpx;
        display: flex;
        background: @solidWhite;
        border-bottom: 2rpx solid @faintWhite;
        align-items: center;
        justify-content: flex-start;

        image {
          width: 50rpx;
          height: 50rpx;
          margin-left: 30rpx;
          margin-right: 10rpx;
        }

        view {
          max-width: 80vw;
          color: @textColor1;
          font-size: 30rpx;
          white-space: nowrap;
          text-overflow: ellipsis;
          overflow: hidden;
          display: inline;
        }
      }

      .grey {
        view,
        label,
        input {
          color: @textColor5 !important;
          border-color: @textColor5 !important;
        }
      }

      view {
        overflow: auto;

        .hr {
          width: 100vw;
          height: 2rpx;
          background-color: @solidWhite;

          view {
            width: 700rpx;
            height: 2rpx;
            margin: 0 auto;
            background-color: @faintWhite;
          }
        }

        .cart-items {
          width: 100vw;
          background: @solidWhite;
          display: flex;

          .left {
            width: 100vw;
            padding: 0;
            background: @solidWhite;
            display: inline-flex;
            align-items: center;

            .left-img {
              width: 160rpx;
              height: 160rpx;
              margin: 22rpx 26rpx;
              border: 1rpx solid @textColor5;
            }

            .left-text {
              flex-grow: 1;

              .text-title {
                width: 60vw;
                height: 38rpx;
                margin-bottom: 12rpx;
                color: @textColor1;
                font-size: 28rpx;
                text-overflow: ellipsis;
                white-space: nowrap;
                overflow: hidden;
              }

              .text-type {
                margin-bottom: 14rpx;
                color: @textColor4;
                font-size: 24rpx;
                text-overflow: ellipsis;
                white-space: nowrap;
                overflow: hidden;
              }

              .pill {
                width: 80rpx;
                height: 34rpx;
                margin-right: 10rpx;
                padding: 0;
                color: @primaryColor;
                font-size: 22rpx;
                border: 2rpx solid @primaryColor;
                border-radius: 4rpx;
                display: inline-flex;
                align-items: center;
                justify-content: center;
              }

              .text-number {
                display: flex;
                align-items: center;
                justify-content: space-between;

                & > view:first-of-type {
                  height: 50rpx;
                  padding: 0;
                  display: flex;
                  align-items: center;
                  justify-content: flex-start;
                }

                .original {
                  margin-right: 10rpx;
                  color: @textColor5;
                  font-size: 28rpx;
                  text-decoration: line-through;
                }

                .price {
                  margin-right: 10rpx;
                  color: @primaryColor;
                  font-size: 32rpx;
                  position: relative;
                  left: -.2rem;
                }

                .count {
                  padding-right: 26rpx;
                  color: @textColor3;
                  font-size: 24rpx;
                }
              }
            }
          }
        }

        .customized-fields {
          min-height: 90rpx;
          padding: 0 15px;
          color: @textColor2;
          font-size: 28rpx;
          background-color: @solidWhite;
          display: flex;
          align-items: center;
          justify-content: space-between;

          view {
            display: flex;
            flex-shrink: 0;
          }

          view:last-of-type {
            padding: 22rpx 10rpx 22rpx 40rpx;
            color: @textColor1;
            text-align: right;
            justify-content: flex-end;
            flex-grow: 1;
            flex-shrink: 1;
          }

          image {
            width: 32rpx;
            height: 32rpx;
            flex-shrink: 0;
          }
        }

        .delivery {
          margin-bottom: 15rpx;
          padding: 0 30rpx;
          color: @textColor1;
          font-size: 28rpx;
          background-color: @solidWhite;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: space-between;

          view:first-of-type {
            color: @textColor2;
          }

          & > view {
            width: 100%;
            padding-bottom: 26rpx;
            display: flex;
            justify-content: space-between;

            &:first-of-type {
              padding-top: 34rpx;
            }

            &:last-of-type {
              padding-bottom: 34rpx;
            }
          }
        }
      }
    }

    .sum {
      margin-bottom: 15rpx;
      height: 90rpx;
      padding: 0 30rpx;
      color: @textColor2;
      font-size: 28rpx;
      background: @solidWhite;
      display: flex;
      flex-grow: 1;
      align-items: center;
      justify-content: space-between;

      view:last-of-type {
        color: @textColor0;
        font-size: 30rpx;
      }
    }

    .mid {
      padding: 0 30rpx;
      background: @solidWhite;
      border-bottom: 120rpx solid @faintWhite;

      .sendtype {
        height: 90rpx;
        border-bottom: 1px solid @dimWhite;
        color: @textColor1;
        font-size: 28rpx;
        display: flex;
        align-items: center;
        justify-content: space-between;

        view:first-of-type {
          color: @textColor2;
        }

        .send-ticket {
          display: inline-flex;
          align-items: center;

          image {
            width: 36rpx;
            height: 36rpx;
            margin-right: 10rpx;
          }

          input {
            width: 75vw;
            margin-left: 20rpx;
            flex-basis: auto;
          }
        }

        .send-ticket-right {
          color: @textColor1;
          display: inline-flex;
          align-items: center;

          image {
            width: 32rpx;
            height: 32rpx;
          }
        }
      }
    }

    .bottom {
      width: 100vw;
      background: @solidWhite;
      position: fixed;
      bottom: 0;
      /*z-index: 99;*/

      view {
        height: 98rpx;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: flex-end;

        .bottom-text {
          color: @textColor1;
          font-size: 26rpx;
        }

        .bottom-price {
          margin-right: 18rpx;
          color: @primaryColor;
          font-size: 32rpx;
        }

        .bottom-btn {
          width: 200rpx;
          color: @solidWhite;
          font-size: 30rpx;
          background: @primaryColor;
          justify-content: center;

          &.disabled {
            background-color: @textColor5;
          }
        }
      }
    }
  }
</style>

<template>
  <view class="page-confirm-order">
    <view
      wx:if="{{!isVirtual}}"
      class="top-address"
      @tap="bindUpdateAddress">
      <block wx:if="{{!currentAddress.name}}">
        <view class="addr-no-left">
          <image
            mode="widthFix"
            src="../../assets/img/confirmOrder/add_addr.png"></image>
          <view class="addr-text">添加收货地址</view>
        </view>
      </block>

      <block wx:else>
        <view class="addr-left">
          <view class="left-up">
            <image
              mode="widthFix"
              src="../../assets/img/confirmOrder/address.png"></image>
            <view style="margin-right: 34rpx;">
              {{currentAddress.name}}
            </view>
            <view>{{currentAddress.tel}}</view>
          </view>
          <view class="left-down">
            {{currentAddress.detail}}
          </view>
        </view>
      </block>

      <view class="addr-right">
        <image
          mode="widthFix"
          src="../../assets/img/confirmOrder/arrow_right.png"></image>
      </view>
    </view>

    <view class="top">
      <block wx:key="index" wx:for-item="store_" wx:for="{{cartForView}}">
        <view
          class="{{storeID === store_.id ? 'cart-store' : 'cart-store grey'}}"
          style="{{isVirtual && 'margin-top: 0'}}"
        >
          <image src="{{storeID === store_.id ? '../../assets/img/cart/store_black.png' : '../../assets/img/cart/store_grey.png'}}"></image>
          <view>{{store_.name}}</view>
        </view>
        <view class="{{storeID === store_.id ? '' : 'grey'}}">
          <block wx:key="index" wx:for="{{store_.list}}">
            <view class="cart-items">
              <view class="left">
                <image class="left-img" src="{{item.image + '?imageView2/2/w/160'}}"></image>
                <view class="left-text">
                  <view class="text-title">{{item.goods_name}}</view>
                  <view class="text-type">{{item.gtype_name}}</view>

                  <block wx:if="{{orderType === 'credits'}}">
                    <view class="text-number">
                      <view>
                        <view class="price" style="left: 0;">
                          {{item.credit}}积分 + ¥{{item.price}}
                        </view>
                      </view>
                      <view class="count">数量：x{{item.count}}</view>
                    </view>
                  </block>

                  <block wx:else>
                    <view class="text-number">
                      <view>
                        <view
                          wx:if="{{item.discount !== 1}}"
                          class="pill">会员价</view>
                        <view class="price">￥{{item.price}}</view>
                        <view
                          wx:if="{{item.discount !== 1}}"
                          class="original">
                          ￥{{item.original_price}}
                        </view>
                      </view>
                      <view class="count">数量：x{{item.count}}</view>
                    </view>
                  </block>

                </view>
              </view>
            </view>
            <view class="hr">
              <view></view>
            </view>

            <block wx:if="{{item.customizedData}}">
              <block
                wx:key="{{field.name}}"
                wx:for="{{item.customizedData}}"
                wx:for-item="field">
                <view class="customized-fields" @tap="bindToggleMask({{item.hash}})">
                  <view>{{field.name}}</view>
                  <view>
                    <!--文本、数字-->
                    <block wx:if="{{field.type === 'string' || field.type === 'number'}}">
                      {{field.value || field.placeholder}}
                    </block>

                    <!--日期-->
                    <block wx:if="{{field.type === 'date'}}">
                      {{field.value || field.placeholder || '选择日期'}}
                    </block>

                    <!--单选、多选-->
                    <block wx:if="{{field.type === 'radio' || field.type === 'checkbox'}}">
                      {{field.formatedValue || field.value}}
                    </block>
                  </view>
                  <image src="../../assets/img/confirmOrder/arrow_right.png"></image>
                </view>
                <view class="hr">
                  <view></view>
                </view>
              </block>
            </block>

            <view wx:if="{{!isVirtual}}" class="delivery">
              <view>
                <view>配送方式</view>

                <block wx:if="{{item._shipping && item._shipping.length > 1}}">
                  <view
                    @tap="bindChangeSelf({{item.hash}})"
                    style="color: #000; display: flex; align-items: center;">
                    {{item.__shippingMethod}}
                    <image
                      style="width: 32rpx; height: 32rpx; margin-left: 4rpx"
                      src="../../assets/img/confirmOrder/arrow_right.png"
                    ></image>
                  </view>
                </block>

                <block wx:else>
                  <view style="color: #000;">{{item.__shippingMethod}}</view>
                </block>
              </view>

              <block wx:if="{{item._shippingMethod === 'self'}}">
                <view>
                  <view>自提门店</view>
                  <view style="max-width: 60vw;">
                    {{item.entrust_shop_name || item.shop_name}}
                  </view>
                </view>

                <view>
                  <view>自提门店地址</view>
                  <view style="max-width: 60vw;">
                    {{item.entrust_shop_address || item.shop_address}}
                  </view>
                </view>
              </block>

              <block wx:if="{{item._shippingMethod === 'merchant'}}">
                <view wx:if="{{(orderType === 'regular' || orderType === 'credits') && item.sendTime}}">
                  <view>预计时间</view>
                  <view>{{item.sendTime}}</view>
                </view>
              </block>
            </view>
          </block>
        </view>
      </block>
    </view>

    <block wx:if="{{orderType === 'credits'}}">
      <view class="sum">
        <view>抵扣积分：</view>
        <view>{{totalCredit}}积分</view>
      </view>
    </block>
    <view class="sum">
      <view>商品合计：</view>
      <view>￥{{totalMoney}}</view>
    </view>
    <!--<block wx:else>-->
    <!--  -->
    <!--</block>-->

    <view class="mid">
      <!--积分类商品不显示这些内容-->
      <block wx:if="{{orderType !== 'credits'}}">
        <block wx:if="{{orderType === 'subscription'}}">
          <view class="sendtype">
            <view>起送日期</view>
              <view
                @tap="bindGoToSelectDate({{sendDate.selected}})"
                style="color: #000; display: flex; align-items: center;">
                {{orderTime.now}}
                <image
                  style="width: 32rpx; height: 32rpx; margin-left: 4rpx"
                  src="../../assets/img/confirmOrder/arrow_right.png"></image>
              </view>
          </view>
        </block>
        <view wx:if="{{!isVirtual}}" class="sendtype">
          <view>运费</view>
          <view>￥{{totalPostage}}</view>
        </view>
        <view class="sendtype" @tap="bindToggleWallet">
          <view class="send-ticket">
            <image src="{{useWallet ? '../../assets/img/cart/choose_active.png' : '../../assets/img/cart/choose.png'}}"></image>
            <view>使用会员钱包</view>
          </view>
          <view class="send-ticket-right">
            <view style="{{useWallet ? 'color: #333;' : 'color: #a9a9a9;'}}">
              {{userBalance}}
            </view>
          </view>
        </view>
        <view wx:if="{{enableInvoice}}" class="sendtype" @tap="bindGetInvoiceTitle">
          <view class="send-ticket">
            <image src="{{invoiceTitle.title ? '../../assets/img/cart/choose_active.png' : '../../assets/img/cart/choose.png'}}"></image>
            <view>我要开发票</view>
          </view>
          <view class="send-ticket-right">
            <view style="color: #333;">{{invoiceTitle.title || ''}}</view>
            <image src="../../assets/img/confirmOrder/arrow_right.png"></image>
          </view>
        </view>
      </block>

      <block wx:else>
        <view class="sendtype" @tap="bindToggleWallet">
          <view class="send-ticket">
            <image src="{{useWallet ? '../../assets/img/cart/choose_active.png' : '../../assets/img/cart/choose.png'}}"></image>
            <view>使用会员钱包</view>
          </view>
          <view class="send-ticket-right">
            <view style="{{useWallet ? 'color: #333;' : 'color: #a9a9a9;'}}">
              {{userBalance}}
            </view>
          </view>
        </view>
      </block>

      <view
        class="sendtype"
        style="border-bottom: none;"
        @tap="bindGo2Note">
        <view class="send-ticket" style="display: flex; flex-grow: 1;">
          <view style="width: 100rpx;">备注:</view>
          <view style="padding-right: 4rpx; text-align: right; flex-grow: 1; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 1; overflow: hidden;">
            {{orderNotes || '如有需要请给卖家留言'}}
          </view>
        </view>
        <image
          style="width: 32rpx; height: 32rpx;"
          src="../../assets/img/confirmOrder/arrow_right.png"></image>
      </view>
    </view>

    <view class="bottom" hidden="{{showMask}}">
      <block wx:if="{{orderType === 'credits'}}">
        <view>
          <view class="bottom-text">合计：</view>
          <view class="bottom-price">{{totalCredit}}积分 + ¥{{totalMoney}}</view>
          <view
            class="{{enable && user.credit >= totalCredit ? 'bottom-btn' : 'bottom-btn disabled'}}"
            @tap="bindOnNewOrder">
            <text>{{user.credit >= totalCredit ? '确认支付' : '积分不足'}}</text>
          </view>
        </view>
      </block>
      <block wx:else>
        <view>
          <view class="bottom-text">应付金额：</view>
          <view class="bottom-price">￥{{total}}</view>
          <view
            class="{{enable ? 'bottom-btn' : 'bottom-btn disabled'}}"
            @tap="bindOnNewOrder">
            <text>去付款</text>
          </view>
        </view>
      </block>
    </view>
  </view>

  <customizedFieldsMask :show.sync="showMask">
  </customizedFieldsMask>
  <creditUnavailableMask :show.sync="showUnavailableMask">
  </creditUnavailableMask>
</template>

<script>
  import wepy from 'wepy';
  import {connect} from 'wepy-redux';

  import UtilsMixin from '../../mixins/utils';
  import PersistenceMixin from '../../mixins/persistence';
  import {actions as OthersActions} from '../../store/others';
  import {actions as OrderActions} from '../../store/order';
  import {actions as AddressActions} from '../../store/address';
  import {verifyCustomizedData} from '../../store/order/helper';
  import CustomizedFieldsMask from '../../components/cart/customizedFieldsMask';
  import CreditUnavailableMask from '../../components/cart/creditUnavailableMask';
  import {DELIVERY_TYPES, DELIVERY_TYPES_INFO} from '../../store/properties';


  @connect({
    cart(state) { return state.order.orderContent },
    orderType(state) { return state.order.orderType },
    localCart(state) { return state.order.cart },
    storeID(state) { return state.store.id },
    cartInfo(state) { return state.order.cartInfo },
    userAddress(state) { return state.address.list },
    userCurrentAddress(state) { return state.address.current },
    orderNotes(state) { return state.others.orderNotes },
    orderGroup(state) { return state.others.orderGroup },
    orderTime(state) { return state.others.orderTime },
    sharedUser(state) { return state.order.sharedUser },
    sharedProduct(state) { return state.order.sharedProduct },
    payInfo(state) { return state.order.payInfo },
    store(state) { return state.store.current },
    user(state) { return state.user },
    enableInvoice(state) { return state.config.enableInvoice },
  }, {
    ...OrderActions,
    ...OthersActions,
    ...AddressActions,
  })


  export default class ConfirmOrder extends wepy.page {
    // 购物车 确认订单页

    data = {
      invoiceTitle: {},
      useWallet: false,
      enable: true,
      showMask: false,
      showUnavailableMask: false,
    };

    components = {
      customizedFieldsMask: CustomizedFieldsMask,
      creditUnavailableMask: CreditUnavailableMask,
    };

    mixins = [UtilsMixin, PersistenceMixin];

    computed = {
      // This totalMoney and cartData
      // is abit different then the Cart Index ones
      // Don't have selected, canAdd, canMinus
      cartData: () => {
        let cartData = [];
        let _cart = {};

        // 'Hash Map' the local Cart
        if (this.cart)
          this.cart.map(
            (item) => {
              const {product, type} = item;
              if (product && type)
                _cart[`${product}${type}`] = item;
            }
          );

        // Update the Cart for views
        if (this.cartInfo)
          this.cartInfo.map(
            (item) => {
              const {goodid, gtypeid} = item;

              // Merge Cart Info
              if (
                goodid
                && gtypeid
                && _cart[`${goodid}${gtypeid}`]
              ) {
                const {_shippingMethod} = _cart[`${goodid}${gtypeid}`];
                const __shippingMethod = DELIVERY_TYPES_INFO[_shippingMethod];

                cartData.push({
                  ...item,
                  ..._cart[`${goodid}${gtypeid}`],
                  __shippingMethod,
                });
              }
            }
          );

        return cartData;
      },

      cartForView: () => {
        let final = [];

        if (this.cartData)
        // Transform all with Store ID
          this.cartData.map((item) => {
            const {shop, shop_name} = item;

            if (!final[shop]) final[shop] = {};

            const list = final[shop].list || [];

            final[shop] = {
              id: shop,
              name: shop_name,
              list: [...list, item],
            };
          });

        // Get The Current Store To The First Place
        if (this.storeID)
          final = Object.values(final)
            .sort((a, b) => (a.id !== this.storeID));

        final = final.filter((x) => (x.list && x.list.length));

        return final;
      },

      // credit goods
      totalCredit: () => {
        let _ = 0;
        if (this.cartData)
          this.cartData.map(
            ({postage, count, credit}) => {
              _ += count * credit;
            }
          );
        return _;
      },

      // Don't includes postages
      totalMoney: () => {
        let _ = 0;
        if (this.cartData)
          this.cartData.map(
            ({postage, count, price}) => {
              _ += count * price;
            }
          );
        return this.parse2Float(_);
      },

      // Only postages
      totalPostage: () => {
        let _ = 0;
        if (this.cartData)
          this.cartData.map(
            ({postage, _shippingMethod}) => {
              if (_shippingMethod !== 'self')
                _ += postage;
            }
          );
        return this.parse2Float(_);
      },

      // over all count down for how much money should pay via wechat
      total: () => {
        const balance = this.user && (this.user.recharge || this.user.asset)
          ? ((this.user.recharge * 1000) + (this.user.asset * 1000)) / 1000
          : 0;
        let spent = ((this.totalMoney * 1000) + (this.totalPostage * 1000)) / 1000;
        if (this.useWallet)
          spent = balance >= spent ? 0 : ((spent * 1000) - (balance * 1000)) / 1000;
        return this.parse2Float(spent);
      },

      // over all count down of the balance display field
      userBalance: () => {
        let spent = 0;
        if (this.orderType === 'credits')
          spent = (this.totalMoney * 1000) / 1000;
        else
          spent = ((this.totalMoney * 1000) + (this.totalPostage * 1000)) / 1000;
        let balance = this.user && (this.user.recharge || this.user.asset)
          ? ((this.user.recharge * 1000) + (this.user.asset * 1000)) / 1000
          : 0;
        if (this.useWallet)
          return balance >= spent
            ? `-￥${this.parse2Float(spent)}`
            : `-￥${this.parse2Float(balance)}`;
        else
          return `余额￥${this.parse2Float(balance)}`;
      },

      // The Currently used address
      currentAddress: () => {
        let _addr = {
          id: null,
          name: null,
          tel: null,
          detail: null,
          code: null,
        };
        let item = null;

        /* eslint-disable brace-style */
        if (
          this.userCurrentAddress
          && this.userAddress
          && this.userAddress.length
        ) {
          const _ = this.userAddress.find(
            (x) => (x.id === this.userCurrentAddress)
          );
          if (_) item = _;
        }

        else if (this.userAddress && this.userAddress.length)
          /* eslint-disable camelcase */
          item = this.userAddress.find(({can_use}) => (can_use) || false);

        if (item)
          _addr = {
            id: item.id,
            name: item.name,
            tel: item.phone,
            detail: item.region + item.location_detail,
            code: item.postcode,
          };

        return _addr;
      },

      // if it is a virtual product
      isVirtual: () => {
        let _ = false;
        this.cartData.map(({fictitious}) => {
          if (fictitious) _ = fictitious;
        });
        return _;
      },
    };

    methods = {
      // Get User Address
      bindUpdateAddress: () => {
        if (this.currentAddress)
          this.go2page().navigate('/pages/me/addressList');
        else
          wepy.chooseAddress({
            success: (res) => {
              if (res)
                this.methods.addAddressService({...res, store: this.store.id});
            },
          });
      },

      bindGetInvoiceTitle: () => {
        const self = this;
        const onFail = () => this.showToast('保存失败');
        const onFailAuth = () => this.showToast('请在小程序设置中打开“发票抬头”的权限');
        const getInvoice = () => {
          wepy.chooseInvoiceTitle({
            success: (res) => {
              self.invoiceTitle = res;
            },
            fail: onFail,
          });
        };

        wepy.getSetting({
          success: (res) => {
            if (!res.authSetting['scope.invoiceTitle'])
              wepy.authorize({
                scope: 'scope.invoiceTitle',
                success: getInvoice,
                fail: onFailAuth,
              });
            else
              getInvoice();
          },
          fail: onFail,
        });
      },

      bindToggleWallet: () => {
        this.useWallet = !this.useWallet;
      },

      bindToggleUnavailableMask: () => {
        this.showUnavailableMask = !this.showUnavailableMask;
      },

      bindToggleMask: (hash) => {
        this.$broadcast('handleCustomizedFieldsChange', hash);
        this.showMask = !this.showMask;
      },

      // Ordering
      bindOnNewOrder: () => {
        /* eslint-disable camelcase */
        if (!this.isVirtual)
          if (!(this.currentAddress && this.currentAddress.id))
            return this.showToast('请选择收货地址');

        if (
          this.orderType === 'credits'
          && this.user.credit < this.totalCredit
        ) // 积分不足
          return this.methods.bindToggleUnavailableMask();

        for (let {customizedData} of this.cartData) {
          if (customizedData) {
            for (let f of customizedData) {
              const r = verifyCustomizedData(f);
              if (r !== false) return this.showToast(r);
            }
          }
        }

        if (this.enable)
          this.enable = !this.enable;
        else
          return;

        const goodsitems = this.cartData.map(
          ({
             goodid,
             gtypeid,
             count,
             is_pt,
             fictitious = false,
             attach,
             customizedData,
             _shippingMethod,
           }) => {
            let share_user_id = null;
            if (
              this.sharedUser
              && this.sharedProduct
              && goodid === this.sharedProduct
            )
              share_user_id = this.sharedUser + '';

            if (attach)
              attach = Array.from(attach).map((item) => {
                const {value} = customizedData.find((x) => (x.id === item.id)) || {};
                return {...item, value};
              });

            let DELIVERY = {};
            Object
              .entries(DELIVERY_TYPES)
              .map(([key, value]) => {
                DELIVERY[value] = key;
              });

            return {
              goods: goodid,
              gtype: gtypeid,
              num: count,
              delivery_method: DELIVERY[_shippingMethod] || null,
              share_user_id,
              is_pt, // 暂放不用字段
              fictitious, // 暂放不用字段
              attach: JSON.stringify(attach),
            };
          }
        );
        const address = this.currentAddress.id;
        const remark = this.orderNotes;
        const {
          bankAccount,
          bankName,
          companyAddress,
          taxNumber,
          telephone,
          title,
          type,
        } = this.invoiceTitle;

        const data = {
          address,
          remark,
          shop: this.storeID,
          use_wallet: this.useWallet,
          invoice: {
            invoice_type: type !== undefined ? String(type) : '',
            title: title || '',
            taxNumber: taxNumber || '',
            companyAddress: companyAddress || '',
            telephone: telephone || '',
            bankName: bankName || '',
            bankAccount: bankAccount || '',
          },
          is_pt: goodsitems[0].is_pt,
          fictitious: goodsitems[0].fictitious,
          groupbuy: this.orderGroup || null,
        };

        switch (this.orderType) {
          case 'regular':
            this.methods.newOrderService({
              orderType: this.orderType,
              data: {...data, goodsitems},
            });
            break;

          case 'subscription':
            this.methods.newOrderService({
              orderType: this.orderType,
              data: {
                ...data,
                goods: goodsitems[0].goods,
                gtype: goodsitems[0].gtype,
                delivery_method: goodsitems[0].delivery_method,
                attach: goodsitems[0].attach,
                start_send_date: this.orderTime.selected,
              },
            });
            break;

          case 'credits':
            this.methods.newOrderService({
              orderType: this.orderType,
              data: {
                ...data,
                goods: goodsitems[0].goods,
                gtype: goodsitems[0].gtype,
                num: goodsitems[0].num,
                delivery_method: goodsitems[0].delivery_method,
                attach: goodsitems[0].attach,
              },
            });
            break;

          default:
        }

        // remove ordered items from local cart
        const localCartHash = this.localCart.map(x => x.hash);
        this.cart.map(
          ({product, type, count}) => {
            if (localCartHash.includes(`${product}${type}`))
              this.methods.updateCartItem({
                product,
                type,
                count: -count,
              });
          }
        );
      },

      // Customized fields on input
      bindCustomizedInput: (hash, type, field, e) => {
        const value = e
          ? (
            e.detail && e.detail.value !== undefined
              ? e.detail.value
              : e
          )
          : undefined;

        let targetItem = this.cart.find((item) => (item.hash === hash));

        if (value === undefined) return;
        if (!targetItem) return;

        const {customizedData} = targetItem;

        if (!customizedData.length) return;

        let data = [...customizedData];

        // string, number, date, radio
        if ([
          'string',
          'number',
          'date',
          'radio',
        ].includes(type)) {
          data = data.map((item) => {
            let obj = {...item};
            if (item.name === field)
              obj = {...obj, value};
            return obj;
          });
        }

        // checkbox
        if (type === 'checkbox') {
          data = data.map((item) => {
            let obj = {...item};

            if (!obj.value)
              obj.value = [];

            if (item.name === field) {
              obj = {
                ...obj,
                value: obj.value.includes(value)
                  ? obj.value.filter((x) => (x !== value))
                  : [...obj.value, value],
              };

              let formatedValue = obj.value.join(' / ');

              let isChecked = {};

              let {options = []} = obj || {};

              Array.from(options).map(
                (x) => {
                  isChecked[x] = obj.value.includes(x);
                }
              );

              obj = {...obj, isChecked, formatedValue};
            }

            return obj;
          });
        }

        const orderContent = this.cart.map(
          (item) => {
            if (item.hash === hash)
              item = {...targetItem, customizedData: data};
            return item;
          },
        );

        this.methods.setOrderContent({
          orderContent,
          orderType: this.orderType,
        });
      },

      bindGo2Note: () => {
        this.go2page().navigate('/pages/all/note');
      },

      bindGoToSelectDate: () => {
        this.go2page().navigate('/pages/cart/deliveryDate');
      },

      bindChangeSelf: (hash) => {
        this.go2page().navigate(`/pages/cart/deliveryMethod?hash=${hash}`);
      },
    };

    events = {
      toggleMask: () => {
        this.methods.bindToggleMask(null);
      },

      toggleCreditUnavailableMask: () => {
        this.methods.bindToggleUnavailableMask();
      },
    };

    onShow() {
      const address = this.currentAddress
        ? this.currentAddress.detail
        : '';
      this.methods.updateCartInfoService({
        orderType: this.orderType,
        cart: this.cart,
        address,
      });
      this.methods.getAddressService(this.store.id);
      setTimeout(() => {
        if (this.getStorageSync('payJs')) {
          this.setStorageSync('payJs', false);
          if (this.payInfo.msg)
            this.showToast(this.payInfo.msg);
          if (this.payInfo && this.payInfo.success) {
            this.methods.setPayJsInfo({data: {}});
            this.go2page().redirect('/pages/me/myOrders');
          } else {
            this.go2page().redirect('/pages/me/myOrders?aid=paying');
            this.enable = !this.enable;
          }
          this.$apply();
        }
      }, 1000);
    }

    onLoad() {
      this.setTitle('确认订单');
    }

    onUnload() {
      this.methods.setOrderNotes('');
      this.methods.setOrderGroup('');
    };

    /* eslint-disable camelcase */
    onShareAppMessage() {
      const title = this.$parent.globalData.appName || '';
      const uri = this.getCurrentPath();
      const {wx_app_openid} = this.user;
      return {
        title,
        path: `/pages/util/index?scene=${wx_app_openid}&uri=/${uri}`,
      };
    };
  }
</script>
