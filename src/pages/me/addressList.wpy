<style lang="less">
  @import (reference) "../../config/variables";

  page {
    background-color: @faintWhite;
  }

  view.page-address-list {
    margin-bottom: 150rpx;

    .grey {
      view,
      label,
      input {
        color: @textColor3 !important;
        border-color: @textColor3 !important;
      }
    }

    .addr {
      margin-bottom: 15rpx;
      background-color: @solidWhite;

      .top {
        height: 130rpx;
        margin: 0 40rpx 20rpx 30rpx;

        .name,
        .phone {
          width: 50%;
          margin-top: 30rpx;
          margin-bottom: 20rpx;
          color: @textColor0;
          font-size: 30rpx;
          text-align: left;
          display: inline-block;
        }

        .phone {
          text-align: right;
        }

        .addr {
          color: @textColor0;
          font-size: 24rpx;
          text-align: left;
          display: block;
        }
      }

      .bottom {
        width: 100%;
        height: 80rpx;
        color: @textColor3;
        font-size: 24rpx;
        border-top: 1rpx solid @dimWhite !important;
        display: flex;
        align-items: center;
        justify-content: space-between;

        .left {
          display: flex;
          align-items: center;

          image {
            width: 36rpx;
            height: 36rpx;
            margin: 0 10rpx 0 30rpx;
          }
        }

        .right {
          display: flex;
          align-items: center;

          view {
            display: flex;
            align-items: center;

            view:last-child {
              margin-right: 20rpx;
            }
          }

          image {
            width: 40rpx;
            height: 40rpx;
            margin: 0 10rpx;
          }
        }
      }
    }

    .import {
      width: 100%;
      height: 90rpx;
      margin-bottom: 110rpx;
      background-color: @solidWhite;
      display: flex;
      align-items: center;
      justify-content: space-between;

      view {
        margin-left: 30rpx;
        color: @textColor0;
        font-size: 28rpx;
      }

      image {
        width: 16rpx;
        height: 24rpx;
        margin-right: 30rpx;
      }
    }

    .recive {
      height: 136rpx;
      background-color: @solidWhite;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      display: flex;
      align-items: center;
      justify-content: space-evenly;

      button {
        width: 360rpx;
        height: 103rpx;
        color: @solidWhite;
        background: @primaryColor;
        line-height: 103rpx;
        font-size: 32rpx;
        border-radius: 10rpx;

        &:last-of-type {
          color: @primaryColor;
          background: @solidWhite;
          border: 1rpx solid @primaryColor;
        }
      }
    }
  }
</style>

<template>
  <view class="page-address-list">
    <block wx:if="{{!userAddress.length}}">
      <empty text="暂无收货地址，请添加~"></empty>
    </block>

    <view
      class="{{item.available ? 'addr' : 'addr grey'}}"
      wx:key="index"
      wx:for="{{list}}">
      <view class="top" @tap="bindSetAddress({{item}})">
        <view class="name">
          收货人：{{item.name}}
        </view>
        <view class="phone">
          {{item.phone}}
        </view>
        <view class="addr">
          收货地址：{{item.region + item.location_detail}}
        </view>
      </view>

      <view class="bottom">
        <view class="left" @tap="bindSetDefault({{item.id}})">
          <!--<image src="{{item.is_default ? '../../assets/img/address/selected.png' : '../../assets/img/address/item.png'}}"></image>-->
          <!--<view>默认地址</view>-->
        </view>
        <view class="right">
          <navigator hover-class='none' url="/pages/me/editAddress?id={{item.id}}">
            <view>
              <image src="../../assets/img/address/edit.png"></image>
              <view>编辑</view>
            </view>
          </navigator>
          <view @tap="bindDeleteAddress({{item.url}})">
            <image src="../../assets/img/address/delete.png"></image>
            <view>删除</view>
          </view>
        </view>
      </view>
    </view>

    <view class="recive">
      <button @tap="bindNewAddress">
        新增收货地址
      </button>
      <button @tap="bindImportAddress">
        微信导入地址
      </button>
    </view>
  </view>

  <addressUnavailable :show.sync="show"></addressUnavailable>
</template>

<script>
  import wepy from 'wepy';
  import {connect} from 'wepy-redux';

  import UtilsMixin from '../../mixins/utils';
  import {actions as AddressActions} from '../../store/address';
  import {actions as StoreActions} from '../../store/store';
  import Empty from '../../components/utils/empty';
  import AddressUnavailable from '../../components/me/addressUnavailable';


  @connect({
    user(state) { return state.user },
    userAddress(state) { return state.address.list },
    addressStatus(state) { return state.address.status },
    store(state) { return state.store.current },
    storeTemp(state) { return state.others.storeID },
  }, {
    ...AddressActions,
    ...StoreActions,
  })


  /* eslint-disable camelcase */
  export default class AddressList extends wepy.page {
    // 地址列表 页面

    data = {
      imported: null,
    };

    components = {
      empty: Empty,
      addressUnavailable: AddressUnavailable,
    };

    mixins = [UtilsMixin];

    computed = {
      show: () => (
        ['out-of-services', 'no-services'].includes(this.addressStatus)
      ),

      list: () => {
        let list = [];
        if (this.userAddress) {
          list = this.userAddress.map(
            (item) => ({
              ...item,
              available: item.can_use || false,
            })
          );
        }
        return list.sort((x) => (x.available ? 0 : 1));
      },
    };

    methods = {
      // Import address from wechat native
      bindImportAddress: () => {
        const self = this;
        const onFail = () => this.showToast('导入失败');
        const onFailAuth = () => this.showToast('请在小程序设置中打开“通讯地址”的权限');
        const getAddr = () => {
          wepy.chooseAddress({
            success: (res) => {
              const imported = {
                ...res,
                isDefault: false,
              };
              self.imported = imported;

              if (res)
                self.methods.addAddressService({
                  address: imported,
                  store: this.store.id,
                });
            },
            fail: onFail,
          });
        };
        wepy.getSetting({
          success: (res) => {
            if (!res.authSetting['scope.address'])
              wepy.authorize({
                scope: 'scope.address',
                success: getAddr,
                fail: onFailAuth,
              });
            else
              getAddr();
          },
          fail: onFail,
        });
      },

      // Set current address from list
      bindSetAddress: ({id, available}) => {
        if (!available)
          return this.showToast('该收货地址暂不在任何门店的服务范围内，请重新选择或添加新地址');
        const obj = this.userAddress.find((x) => (x.id === Number(id)));
        if (obj) {
          this.methods.setAddressCurrent(Number(id));
          this.go2page().back();
        }
      },

      // Set default address
      bindSetDefault: (id) => {
        const {url, ...fields} = this.userAddress.find(
          (item) => (item.id === parseInt(id))
        );
        const newList = this.userAddress.map(
          (item) => ({
            ...item,
            is_default: item.id === parseInt(id),
          })
        );

        this.methods.updateAddressService(url, {
          ...fields,
          is_default: true,
        });
        this.methods.setAddressList(newList);
      },

      // Delete address
      bindDeleteAddress: (url) => {
        this.showModal({
          title: '确认删除',
          content: '确认删除此地址吗',
          success: (res) => {
            if (res.confirm)
              this.methods.deleteAddressService({url, store: this.store.id});
          },
        });
      },

      // New address
      bindNewAddress: () => {
        this.go2page().navigate('/pages/me/editAddress');
      },
    };

    events = {
      dismissModals: () => {
        this.methods.setAddressStatus('');
      },

      switchStore: () => {
        this.methods.setAddressStatus('');
        if (this.storeTemp) {
          this.methods.getCurrentStoreService({
            storeID: this.storeTemp,
          });
          this.go2page().switch('/pages/explore/index');
        }
      },

      confirmSave: () => {
        this.methods.setAddressStatus('');
        if (this.imported !== null)
          this.methods.addAddressService({
            address: this.imported,
            skipCheck: true,
            store: this.store.id,
          });
      },
    };

    onShow() {
      this.setTitle('收货地址');
      this.methods.getAddressService(this.store.id);
    };

    /* eslint-disable camelcase */
    onShareAppMessage() {
      const title = this.$parent.globalData.appName || '';
      const uri = this.getCurrentPath();
      const {wx_app_openid} = this.user;
      return {
        title,
        path: `/pages/util/index?scene=${wx_app_openid}&uri=/${uri}`,
      };
    };
  }
</script>
